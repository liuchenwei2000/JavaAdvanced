                                                                                             应用程序配置的存储


大多数程序都可以由用户自己进行配置，应用程序必须能够保存用户的配置并在下次运行该程序的时候读取这些配置
Java Web Start应用程序可以使用持久性存储的方法来是实现这个目的

传统的Java应用程序配置信息的存储方法：

a.
属性映射(property map)是存储键/值对的数据结构，常用来存放配置信息
它的特性：
1，键和值都是字符串。
2，键/值对可以很容易地写入文件或从文件读取。
3，使用二级表来存放默认值。
Java平台上，实现属性映射的类称为Properties

b.
Properties类简化了读取和保存配置信息的过程，但是，使用属性文件有很多缺点：
1，配置文件不一定和应用程序存储在同一个位置，因为存放的地方可能是不可写的
例如在一个只读目录下或者是在JAR文件中
2，多个用户可能想以不同方式配置同一个应用程序
3，配置文件不能存放在用户的主目录中，因为某些OS没有主目录的概念。
4，没有标准的为配置文件命名的规则，当用户安装了多个Java应用程序时，会增加配置文件名字冲突的可能性。

一些操作系统具有存储配置信息的中心知识库，Preferences类提供了一个与平台无关的中心知识库。
在Windows中，Preferences类使用注册表来存储信息；在Linux中，这些信息存放在本地文件系统中。
对于使用Preferences类的程序员而言，中心知识库的实现时透明的。

Preferences的中心知识库具有树状结构，每个结点的路径名以/com/mycompany/myapp的形式出现
这样就避免了命名冲突，建议节点路径要和程序中的包名匹配

中心知识库中的每个节点都有一个独立的表来存放键/值对。
用户可以用它来存放数字、字符创或者字节数组，但不适合存放序列化的对象。


为了得到更多的灵活性，系统中有多个并行的树。每个程序使用者有一棵树，同时，系统中还存在一棵树，称为系统树。
用来存放全部用户共有的信息。Preferences类使用操作系统中的"当前用户"概念来确保用户访问恰当的用户树。

Preferences类使用操作系统中"当前用户"概念来确保用户访问恰当的用户树

为了访问树中的结点，要从用户或系统的根开始：

Preferences root = Preferences.userRoot();或
Preferences root = Preferences.systemRoot();

然后访问该结点，可以只提供结点的路径名：

Preferences node = root.node("/com/mycompany/myapp");

如果结点的路径名和类的包名一样，则有一种简单、快捷的方法获取该结点：

Preferences node = Preferences.userNodeForPackage(obj.getClass());
Preferences node = Preferences.systemNodeForPackage(obj.getClass());

通常情况下obj就是this引用，一旦获取了结点，就可以使用它的方法来访问键/值表。

注：
在读取信息的时候必须指定默认值，以防止中心知识库中的值不可用

如果程序使用配置信息，那么应该允许用户导出和导入它们，这样就可以将这些信息从一台机器迁移到另一台机器上

可以使用下面的方法将子树(或者一个结点)的配置信息导出：
void exportSubtree(OutputStream out)
void exportNode(OutputStream out)

数据以XML格式存储，可以通过以下调用将其导入到另一个中心知识库：
void importPreferences(InputStream in)


Preferences API

Preferences API与对象序列化相比，前者与对象持久化更密切，因为它可以自动存储和读取文件。
不过，它只能用于小的、受限的数据集合――――我们只能存储基本类型和字符串，并且每个字符串的长度不能超过8K
Preferences API用于存储和读取用户的偏好(preference)以及程序配置项的设置。

Preferences是一个键-值集合(类似映射)，存储在一个节点层次结构中。
尽管节点层次结构可用来创建更为复杂的结构，但通常是创建你的类名命名的单一节点，然后将信息存储于其中。

Preferences API将存储的数据放到哪里了？它会利用合适的系统资源完成这个任务，并且这些资源会随OS不同而不同。
例如在Windows里，就使用注册表(因为它已经有了"键值对"这样的节点对层次结构了)