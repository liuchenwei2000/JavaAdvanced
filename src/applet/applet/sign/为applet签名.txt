                                                                                             为 applet 签名

由于Java的沙盒安全模型的存在，使得未签名的applet在客户端被禁止执行某些操作，比如读写文件或者连接局域网。
经过签名的applet能够向用户验证applet的编写者：他是否真的编写了这个applet；此JAR文件离开服务器后，内容是否被篡改过。
如果没有这些最基本的保证，applet将不被允许执行任何有可能破坏用户机器，或者侵犯用户隐私的操作。
要在互联网上安全地使用applet，这些限制非常重要，不过相对来说，这也限制了applet的能力。

Java Plugin发布以来，为applet签名的过程已经变得更加简单和标准化，这使得applet成为了一种更加可行的部署应用的方式。
使用标准的Java工具，为applet签名已经成为了相当简单的工作，plugin不仅为applet的签名和部署提供了标准方法，而且还通过自动安装证书使得最终用户使用起来更方便。

要使applet作为一个已签名的applet运行，需要把它打包进一个JAR文件，然后为JAR文件签名。
一旦做好了JAR文件，还需要一个与签名一起的证书，证书用来为代码签名，以向用户保证他们下载的确实是你提供的代码，并且这些被部署的代码在你签名之后没有被改动过。
本质上，数字签名就是一些比特位，当用户下载签名的时候，由权威部门为你作出担保。

制作自签名的证书可以使用keytool工具，输入：

keytool –genkey –alias <keyname> -keystore <url>

keyname是要给出的密钥别名，比如"mykey",url是存放密钥的文件位置(如"key.store"，后缀必须是store)

将Applet打包成jar之后可以使用keytool工具生成密匙库，输入命令：
keytool –genkey –alias <keyname> -keystore <url>
(可能会使用-valid选项，这将可以指定密钥合法的天数，默认情况是六个月有效期)
执行之后命令行窗口中会提示输入keystore的密码、你的姓名、组织单位等等信息。
这里要注意的是输入密码请记住，后面要用到的，在最后，输入y确认信息。

你的新证书是自己签的名，所以并不能为某个权威部门所信任，如果你使用这个证书来为JAR文件签名，最终用户将得到警告信息，它会强烈建议用户不要使用你的软件。
你和你的用户不得不忍受这些，直到你出于商业目的为受信任的证书付费为止，要为你的JAR文件签名，可以使用标准 Java 工具 jarsigner ：

jarsigner –keystore <url> <jarfile> <keyname>

url表示密钥文件的位置，jarfile是JAR文件的名称，keyname是密钥的别名(这里你将再次被提示输入密码)。
这样做完之后的JAR文件，就被标识成是采用你提供的密钥进行签名的，这样就能保证在你签名之后它没有被篡改过。

当有客户下载你的applet时，他们将被告知，正在载入一个已签名的applet，并提示是否信任签名人。
如前所述，你这个处于测试目的的证书不具有很高的可信度，所以用户会得到警告。
如果他们选择信任你的applet，此时applet就好像一个普通应用程序一样，能完全访问客户的系统。
