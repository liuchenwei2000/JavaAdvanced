                                                                                                        深入Component

Component在Swing的MVC模型中担任Controller的角色，同时它是Swing API中代表具体组件的对象。

Component在Swing中对外负责提供API接口，对内负责协调控制Model和UI Delegate(有时可能还包括Renderer)的操作，可以说是整个Swing结构的中心角色。

Component代表Swing对应用程序提供了如下几类API：
1，用户界面的组件树的创建和修改的方法，包括组件的添加和删除等操作。
2，组件属性访问的方法，比如组件位置、组件前后背景色、组件字体等等。
3，组件状态及生命周期的管理方法，比如隐藏和显示、创建和销毁等等。
4，组件位置、大小的管理，包括通过布局管理器的方法。
5，组件事件处理接口的管理，包括添加、删除等操作。

从应用程序开发者的角度来看，Component是组件树上的节点、是控制外观和行为的入口、是组件事件的发源地。
从Swing组件实现者的角度来看，Component是协调Model和UI Delegate的操作的地方，
是低层次事件处理的地方，是高层事件发生的地方，是同父组件和子组件交互的地方。掌握了这些角度，程序员就完全可以实现自己的自定义简单组件。

总的来说，自定义组件需要完成两样基本任务：

1，侦听并处理低层事件，根据具体情况改变组件状态，如需要还要发出高级事件。
侦听底层的事件是指侦听类似于mouse、keyboard、focus等事件，然后处理此事件，
如果发现此事件带有特定语义，表达某种组件行为，则改变当前的组件状态以记录，并触发某种高级事件通知应用程序进行处理。

2，根据当前组件的状态画出当前组件的外观。
重画界面的外观只需要覆盖paint(Graphics g)方法即可。
除了上面两个基本准则外，还需要提供访问组件属性的方法。

示例见swing.inside.component.MyButton1.java。


图形用户界面的组件按照其在组件树上的角色可以分为容器组件和叶组件。Swing模型把叶组件当做是特殊、没有子组件的容器组件，这是JComponent继承Container类，所有Swing组件继承JComponent的原因。

Swing组件的paint方法时内部接口方法，一般用户不需要直接调用这个方法，它总是在事件调度线程中调用。一般说来除了系统刷新事件触发这个方法，Component的repaint也会触发这个方法的调用。repaint方法常用于当组件状态发生变化时刷新界面使用。

MyButton1的paint方法实现是一个非常老式的做法，现在JComponent的实现已经把paint方法改造成可以嵌套多重机制的地方，这些机制包括层次渲染、边框、透明背景、双缓冲以及皮肤等。

JComponent在paint方法中首先根据组件是否需要使用双缓冲，封装好图形设备对象，然后经过一番处理后调用paintComponent方法画出自身，然后调用paintBorer画出边框，最后调用paintChildren来完成子组件的渲染。

paintComponent是画出组件自身，不包括子组件。因此MyButton1可以通过覆盖paintComponent方法完成MyButton1的重画。示例见swing.inside.component.MyButton2.java。

paintBorder意思是画出组件的边框。Swing所有组件都有边框的概念，就是说可以为任何组件添加各种边框，包括自定义边框。

paintChildren完成容器类组件的子组件的渲染。JDK默认的实现是调用各个子组件的paint方法。一般来说不需要重载这个方法。



































