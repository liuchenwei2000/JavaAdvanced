                                                                                        日 志 API 的 产 生 背 景

记录日志是报告有关运行程序信息的处理过程。记录日志在调试期间也很有用。
没有记录日志，我们可能会通过插println()语句来解释程序的行为。
但是，一旦我们判定程序正在正确运行，我们可能会把println()语句去掉。
这之后，如果我们运行出来了更多的bug，那么可能需要将这些println()语句放回原处。
如果我们能够插入某种输出语句，它们只能在需要时被使用，那该有多好。

在从JDK1.4中获得记录日志API之前，程序员通常会使用这样一项技术：
该技术依赖于Java编译器将会优化掉那些从不会被调用的代码这个事实。
如果debug是 static final boolean，而且我们声明：

if(debug) {
System.out.println("Debug info");
}

那么当debug的值是false时，编译器将彻底移除括号里面的代码
(因此这些代码在不会被用到的时候，根本就不会引起任何运行时的开销)。
使用这项技术，我们可以在程序各处放置追踪代码，而且很容易地打开和关闭它。
不过，这种技术的缺点是：要打开或关闭追踪语句，我们必须重编译代码。
但是，如果通过使用可以修改的配置文件(修改其记录日志属性)，
就能够打开追踪而不需要重新编译程序，那就会更方便了。


日志API完美的替代了打印信息的println()语句

日志API的优点

1，可以很容易的取消全部日志记录，或者仅仅取消某个级别的日志，而且开启和关闭操作也很容易。
2，可以很简单的禁止日志的输出，因此，将这些日志代码留在程序中所付出的代价很小。
3，日志记录可以被定向到不同的处理器，用于在控制台中显示，用于存储在文件中等。
4，日志记录器和处理器都可以对记录进行过滤。过滤器可以根据具体实现丢弃无用的记录项。
5，日志记录可以采用不同的方式格式化，比如纯文本或XML。
6，应用程序可以使用多个日志记录器，它们使用类似包名的这种具有层次结构的名字。
7，在默认情况下，日志系统的配置由配置文件控制，如果需要的话，应用程序可以替换这个配置。