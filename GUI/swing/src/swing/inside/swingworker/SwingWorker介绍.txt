
从JDK6开始引进的SwingWorker能更轻松的编写多线程Swing程序，改善Swing程序的结构，提高界面相应的灵活性。

SwingWorker类帮你管理任务线程和SwingEDT之间的交互，尽管SwingWorker不能解决并发线程中遇到的所有问题，但的确有助于分离SwingEDT和任务线程，使它们各负其责：
对于EDT而言，就是绘制和更新界面，响应用户输入；
对于任务线程而言，就是执行和界面无直接关系的耗时操作。
可以想象EDT线程的事件队列很繁忙，几乎每一次GUI交互和时间都是通过它完成。
事件队列上的任务必须非常快，否则就会阻塞其他任务的执行，使队列里阻塞了很多等待执行的事件，造成界面响应不灵活。
任何需时超过30到100毫秒的任务不应放在EDT上执行，否则用户就会觉察到输入和界面相应之间的延迟。
														  
SwingWorker是抽象类，因此必须继承它才能执行所需的特定任务。

该类有两个类型参数：T及V。T是doInBackgroud和get方法的返回类型，V是publish和process要处理的数据类型。

SwingWorker实现了Runnable接口和Future两个接口。
Runnable对象一般作为线程的一部分执行，当Thread对象启动时，它激活Runnable对象的run方法。
实现了Futrue接口，因此SwingWorker产生类型为T的结果值并提供同线程交互的方法。

SwingWorker实现以下接口方法：
boolean cancel(boolean mayInterruptIfRunning)
T get()
T get(long timeout,TimeUnit unit)
boolean isCancelled()
boolean isDone()

继承类需要实现SwingWorker的抽象方法：
protected T doInBackgroud throws Exception

doInBackgroud方法作为任务线程的一部分执行，它负责完成线程的基本任务，并以返回值来作为线程的执行结果。
继承类须覆盖该方法并确保包含或代理任务线程的基本任务。
不要直接调用该方法，应使用任务对象(SwingWorker的子类对象)的execute()方法来调度执行。

在获得执行结果后应使用SwingWorker的get方法获取doInBackground方法的结果。
可以再EDT上调用get方法，但该方法将一直处于阻塞状态，直到任务线程完成。
最好只有在知道结果时才调用get方法，这样用户便不用等待。为防止阻塞，可以使用idDone方法来检验doInBackground是否完成。
获取任务结果的最好地方是在done方法内：
protected void done()

在doInBackgroud方法完成之后，SwingWorker调用done方法。如果任务需要在完成后使用线程结果更新GUI组件或者做些清理工作，
可覆盖done方法来完成它们。这儿是调用get方法的最好地方，因为此时已知道线程任务完成了，
SwingWorker在EDT上激活done方法，因此可以在此方法内安全的和任何GUI组件交互。

没必要等到线程完成就可以获得中间结果。中间结果是任务线程在产生最后结果之前就能产生的数据。
当任务线程执行时，它可以发布类型为V的中间结果，覆盖process来处理中间结果。

当属性改变时，SwingWorker实例能通知处理器，SwingWorker有两个重要的属性：状态和进度。任务线程有几种状态，用SwingWorker.StateValue枚举来表示：
PENDING
STARTED
DONE

任务线程一创建就处于PENDING状态，当doInBackgroud方法开始时，任务线程就进入STARTED状态，
当doInBackgroud方法完成后，任务线程就处于DONE状态，随着线程进入各个阶段，SwingWorker超类自动设置这些状态值。
可以添加处理器，当这些属性发生变化来接收通知。

最后，任务对象有一个进度属性(progress)，随着任务进展时，可以将这个属性从0更新到100标识任务进度，当该属性发生变化时，任务通知处理器进行处理。


总结

所有的GUI事件和交互都运行在EDT上，在EDT上运行耗时或者IO密集型处理会导致界面变得缓慢失去响应，为改善这种状况应使用SwingWorker类将这些任务转移到任务线程中。
使用SwingWorker，可以执行相同的任务而不会延迟EDT执行，会提高程序的性能，并且任务线程可以安全同界面组件交互，
因为有回调方法可以在EDT上运行，允许任务运行和完成时更新GUI组件。
